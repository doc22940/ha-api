FORMAT: 1A
HOST: http://api.hyperaud.io

# Hyperaudio v1
This is the bottom-up version created for MozFest 2013.
TODO fixme

## User details [/v1/whoami]

### Check for existing user session [GET]
Note: both responses are actually 200. (404 TBD)

+ Response 404 (application/json)

        {
            "user": null
        }

+ Response 200 (application/json)

        {
            "user": "masterblaster"
        }

## Sign in [/v1/login]
### [POST]
Successful response identical with /v1/whoami

+ Request (application/json)
    
        {
            password: "thunderdome",
            username: "masterblaster"
        }

+ Response 200

        {
            "user": "masterblaster"
        }

+ Response 401
    
            EMPTY


## Sign out [/v1/logout]
### [POST]
Successful response identical with /v1/whoami (null user)

+ Response 200

        {
            "user": null
        }


## Register [/v1/register]
In this version check `/whoami` afterwards to see if registered (and logged in) as it fails silently if the account already exists.
### [POST]

+ Request (application/json)
    
        {
            username: "masterblaster",
            password: "thunderdome",
            email: "master@blaster.foo"
        }

+ Response 200
            
        {
            "user": null
        }

+ Response 401

        EMPTY


## Transcripts Collecton [/{user}/transcripts]
+ Parameters
    + user (optional) ... username
    
### List all Transcripts [GET]
Shows all transcripts.

+ Response 200 (application/json)
        
        [
          {
            "_id": "5265bdf9ddb17fae06000001",
            "label": "ts-clapper-march-13.htm",
            "desc": "",
            "type": "html",
            "sort": 999,
            "owner": "gridinoc",
            "media": "5265bc2a5b1746d605000001",
            "meta": {
              "filename": "ts-clapper-march-13.htm",
              "mimetype": "text/html",
              "size": 2016,
              "url": "https://www.filepicker.io/api/file/6oDMzLGeTJGHzvDbLdsj",
              "key": "SgTSetUYS620HxDIGVsY_ts-clapper-march-13.htm"
            },
            "content": null,
            "__v": 0
          },
          {
            "_id": "5265be16ddb17fae06000002",
            "label": "ts-clapper-responds.htm",
            "desc": "",
            "type": "html",
            "sort": 999,
            "owner": "gridinoc",
            "media": "5265bc605b1746d605000002",
            "meta": {
              "filename": "ts-clapper-responds.htm",
              "mimetype": "text/html",
              "size": 2461,
              "url": "https://www.filepicker.io/api/file/WXm8dAq7Tw209CxZnY7g",
              "key": "2JDtDZO0QQGEW4gS5tjY_ts-clapper-responds.htm"
            },
            "content": null,
            "__v": 0
          }
        ]

### Create Transcript [POST]
The `_id` is the MongoDB ObjectId, generated at creation time.

+ Request (application/json)

        TODO
        
+ Response 200 (application/json)

        TODO
        
## Transcript [/{user}/transcript/{id}]
A single Transcript object with all the details.

+ Parameters
    + id (required) ... transcript id = MongoDB ObjectId
    + user (optional) ... when provided it filters the collection
    
### Retrieve Transcript [GET]
The `content` field is populated with the content of the `/{owner}/{meta.filename}`
The `media` field is expanded with the content of the corresponding Media object.
+ Response 200 (application/json)
        
        
        {

        }


### Update Transcript [PUT]
The `media` field contains the ObjectId of a media object. Populate it to link a transcript to a media file.
The `content` will be stored in the database, and if a `meta.filename` is provided, also written to that file (`/{owner}/{meta.filename}`)
+ Request (application/json)

        {

        }

+ Response 200 (application/json)

        {

        }
        
### Delete Transcript [DELETE]
This deleted the database entry not the actual files (that exist on filepicker.io, S3 and data.hyperaud.io server)
+ Response 204

